{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","sagas/sagas.js","reduxs/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this$props","this","props","fetching","dog","onRequestDog","error","react_default","a","createElement","className","src","logo","alt","disabled","onClick","style","color","Component","connect","state","dispatch","type","Boolean","window","location","hostname","match","watcherSaga","workerSaga","regenerator_default","wrap","_context","prev","next","takeLatest","stop","_marked","fetchDog","axios","method","url","response","_context2","call","sent","data","message","put","t0","_marked2","API_CALL_REQUEST","API_CALL_SUCCESS","API_CALL_FAILURE","initialState","sagaMiddleware","createSagaMiddleware","reduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","arguments","length","undefined","action","Object","objectSpread","compose","applyMiddleware","run","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6QCKlCC,mLACK,IAAAC,EACwCC,KAAKC,MAA5CC,EADDH,EACCG,SAAUC,EADXJ,EACWI,IAAKC,EADhBL,EACgBK,aAAcC,EAD9BN,EAC8BM,MAErC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,GAAOQ,IAAMF,UAAU,WAAWG,IAAI,SAChDN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,uBAECN,EACCG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,8BAEEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,sCAGHP,EACCI,EAAAC,EAAAC,cAAA,UAAQK,UAAQ,GAAhB,eAEEP,EAAAC,EAAAC,cAAA,UAAQM,QAASV,GAAjB,iBAGHC,GAASC,EAAAC,EAAAC,cAAA,KAAGO,MAAO,CAAEC,MAAO,QAAnB,0CAtBFC,aA6CHC,cAdS,SAAAC,GACtB,MAAO,CACLjB,SAAUiB,EAAMjB,SAChBC,IAAKgB,EAAMhB,IACXE,MAAOc,EAAMd,QAIU,SAAAe,GACzB,MAAO,CACLhB,aAAc,kBAAMgB,EAAS,CAAEC,KAAM,wBAI1BH,CAA6CpB,GCtCxCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kICdWC,cAaPC,GAbH,SAAUD,IAAV,OAAAE,EAAAtB,EAAAuB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACL,OADKF,EAAAE,KAAA,EACCC,YAAW,mBAAoBN,GADhC,wBAAAG,EAAAI,SAAAC,GAKP,SAASC,IACP,OAAOC,IAAM,CACXC,OAAQ,MACRC,IAAK,4CAKT,SAAUZ,IAAV,IAAAa,EAAAtC,EAAA,OAAA0B,EAAAtB,EAAAuB,KAAA,SAAAY,GAAA,cAAAA,EAAAV,KAAAU,EAAAT,MAAA,OAEqB,OAFrBS,EAAAV,KAAA,EAAAU,EAAAT,KAAA,EAE2BU,YAAKN,GAFhC,OAMI,OAJMI,EAFVC,EAAAE,KAGUzC,EAAMsC,EAASI,KAAKC,QAH9BJ,EAAAT,KAAA,EAMUc,YAAI,CAAE1B,KAAM,mBAAoBlB,QAN1C,OAAAuC,EAAAT,KAAA,gBAUI,OAVJS,EAAAV,KAAA,EAAAU,EAAAM,GAAAN,EAAA,SAAAA,EAAAT,KAAA,GAUUc,YAAI,CAAE1B,KAAM,mBAAoBhB,MAAKqC,EAAAM,KAV/C,yBAAAN,EAAAP,SAAAc,EAAA,0BChBMC,EAAmB,mBACnBC,EAAmB,mBACnBC,EAAmB,mBAGnBC,EAAe,CACnBnD,UAAU,EACVC,IAAK,KACLE,MAAO,MCET,IAAMiD,EAAiBC,cAGjBC,EAAgBjC,OAAOkC,8BAAgClC,OAAOkC,+BAGhEC,EAAQC,YDLL,WAA+C,IAA9BxC,EAA8ByC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBP,EAAcU,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAO1C,MACb,KAAK6B,EACH,OAAOc,OAAAC,EAAA,EAAAD,CAAA,GAAK7C,EAAZ,CAAmBjB,UAAU,EAAMG,MAAO,OAC5C,KAAK8C,EACH,OAAOa,OAAAC,EAAA,EAAAD,CAAA,GAAK7C,EAAZ,CAAmBjB,UAAU,EAAOC,IAAK4D,EAAO5D,MAClD,KAAKiD,EACH,OAAOY,OAAAC,EAAA,EAAAD,CAAA,GAAK7C,EAAZ,CAAmBjB,UAAU,EAAOC,IAAK,KAAME,MAAO0D,EAAO1D,QAC/D,QACE,OAAOc,ICFX+C,YAAQC,YAAgBb,GAAiBE,IAI3CF,EAAec,IAAIzC,GAEnB0C,IAASC,OACPhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAUb,MAAOA,GACfpD,EAAAC,EAAAC,cAACgE,EAAD,OACWC,SAASC,eAAe,SHqGjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.29180e6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n  render() {\n    const { fetching, dog, onRequestDog, error } = this.props;\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={dog || logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to Dog Saga</h1>\n\n          {dog ? (\n            <p className=\"App-intro\">Keep clicking for new dogs</p>\n          ) : (\n              <p className=\"App-intro\">Replace the React icon with a dog!</p>\n            )}\n\n          {fetching ? (\n            <button disabled>Fetching...</button>\n          ) : (\n              <button onClick={onRequestDog}>Request a Dog</button>\n            )}\n\n          {error && <p style={{ color: \"red\" }}>Uh oh - something went wrong!</p>}\n\n        </header>\n\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    fetching: state.fetching,\n    dog: state.dog,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRequestDog: () => dispatch({ type: \"API_CALL_REQUEST\" })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { takeLatest, call, put } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\n// watcher saga: watches for actions dispatched to the store, starts worker saga\r\nexport function* watcherSaga() {\r\n  yield takeLatest(\"API_CALL_REQUEST\", workerSaga);\r\n}\r\n\r\n// function that makes the api request and returns a Promise for response\r\nfunction fetchDog() {\r\n  return axios({\r\n    method: \"get\",\r\n    url: \"https://dog.ceo/api/breeds/image/random\"\r\n  });\r\n}\r\n\r\n// worker saga: makes the api call when watcher saga sees the action\r\nfunction* workerSaga() {\r\n  try {\r\n    const response = yield call(fetchDog);\r\n    const dog = response.data.message;\r\n\r\n    // dispatch a success action to the store with the new dog\r\n    yield put({ type: \"API_CALL_SUCCESS\", dog });\r\n  \r\n  } catch (error) {\r\n    // dispatch a failure action to the store with the error\r\n    yield put({ type: \"API_CALL_FAILURE\", error });\r\n  }\r\n}","// action types\r\nconst API_CALL_REQUEST = \"API_CALL_REQUEST\";\r\nconst API_CALL_SUCCESS = \"API_CALL_SUCCESS\";\r\nconst API_CALL_FAILURE = \"API_CALL_FAILURE\";\r\n\r\n// reducer with initial state\r\nconst initialState = {\r\n  fetching: false,\r\n  dog: null,\r\n  error: null\r\n};\r\n\r\nexport function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case API_CALL_REQUEST:\r\n      return { ...state, fetching: true, error: null };\r\n    case API_CALL_SUCCESS:\r\n      return { ...state, fetching: false, dog: action.dog };\r\n    case API_CALL_FAILURE:\r\n      return { ...state, fetching: false, dog: null, error: action.error };\r\n    default:\r\n      return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport createSagaMiddleware from 'redux-saga';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { watcherSaga } from './sagas/sagas';\nimport { Provider } from 'react-redux';\nimport { reducer } from './reduxs/reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n//dev tools middleware\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n\n// create a redux store with our reducer above and middleware\nlet store = createStore(\n  reducer,\n  compose(applyMiddleware(sagaMiddleware), reduxDevTools)\n);\n\n// run the saga\nsagaMiddleware.run(watcherSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}